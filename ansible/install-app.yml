#
# spreg install playbook
#

- hosts: "{{ target }}"
  serial: 1
  max_fail_percentage: 10
  gather_facts: false
  remote_user: iamcert
  vars:
    app_name: spreg

  tasks:
  - local_action: stat path=./local_vars.yml
    register: local_vars_stat

  - include_vars: "local_vars.yml"
    when: local_vars_stat.stat.exists

  - name: create properties yml file
    local_action: "property_to_yml name=spreg type={{ cluster_type }}"
 
  - include_vars: "properties.yml"

  - name: check for secrets file
    stat: path={{ spreg_root }}/spreg-secrets.properties
    register: spregsecrets
  - fail: msg="secrets file not preloaded on target"
    when: not spregsecrets.stat.exists

  # copy spreg properties file
  # change restarts tomcat
  - name: copy properties file
    copy: "src=../spreg.properties.{{ cluster_type }}  dest={{ spreg_root }}/spreg.properties group=iam-dev mode=664"
    notify: restart tomcat
 
  # configure tomcat startup properties
  # change restarts tomcat
  - name: tomcat startup params
    daemon_config: "service=tomcat key=spreg.properties.path value=file:{{ spreg_root }}"
    notify: restart tomcat

  # update http and https config
  # change restarts apache
  - include: "ansible-tools/tasks/apache_config.yml file=https prod=spreg"
  - include: "ansible-tools/tasks/apache_config.yml file=http prod=spreg"

  # copy js files
  - name: copy js files
    copy: "src=../src/main/webapp/sp.js dest=/www/js/sp.js group=iam-dev mode=664"
    when: non_standard_apache is not defined

  # copy css files
  - name: copy css files
    copy: "src=../src/main/webapp/sp.css dest=/www/css/sp.css group=iam-dev mode=664"
    when: non_standard_apache is not defined

  # update certs and keys (used by spreg)
  # change restarts tomcat
  - name: copy certs and keys
    copy: "src={{ item.src }} dest={{ item.dest }} group=iam-dev mode=664 "
    with_items:
       - { src: '{{local_webclient_certFile}}', dest: '{{spreg_webclient_certFile}}' }
       - { src: '{{local_webclient_keyFile}}', dest: '{{spreg_webclient_keyFile}}' }
       - { src: '{{local_webclient_caFile}}', dest: '{{spreg_webclient_caFile}}' }
    when: have_local_certs is defined and item.src != ""
    notify: restart tomcat

  # copy the attributes data file
  # until this is in the dataabse 
  - name: copy attribute data
    copy: "src=../attribute.xml dest={{ spreg_root }}/attribute.xml group=iam-dev mode=664"
    notify: restart tomcat

  # update the spreg.war file
  - name: copy war
    copy: "src=../target/spreg.war dest=/data/webapps/spreg.war group=iam-dev mode=664"
    notify: restart tomcat

  # copy xmlsectool
  - name: copy xmlsectool
    synchronize: "src=../xmlsectool  dest={{ spreg_root }} "

  # run any handlers 
  - meta: flush_handlers

  # always run the test
  - name: run service tests
    local_action:  "command wget  -O /dev/null
           --certificate={{ local_webclient_certFile }}
           --private-key={{ local_webclient_keyFile }}
           --ca-certificate={{ local_webclient_caFile }}
           --no-check-certificate
            'https://{{inventory_hostname}}/spreg/ws/metadata?mdid=UW&id=https://iam-ws.u.washington.edu/'"
    register: wget_result
    changed_when: "wget_result.rc != 0"

  # idle loadr if test fails
  - name: idle loadr if test fail
    command: /usr/bin/nohup /data/local/bin/ansible_command loadr idle
    when: "wget_result.rc != 0"
      
  # fail if test fails
  - name: fail if test fail
    fail: msg="API service test fails after install"
    when: "wget_result.rc != 0"
      

  # handlers mostly standard from iam-ansible

##  handlers:
##    - include: "ansible-tools/tasks/iam_handlers.yml"


  - name: idle wait
    pause: "seconds={{ idle_wait_sec |default(30) }}"
    when: " cluster_hosts|length>1 "

  # restart tomcat ( 1. dle loadr,  2. wait xxx seconds  )
  - name: do echo
    debug: msg="restart tomcat handler"

  - name: restart tomcat
    command: /usr/bin/nohup /data/local/bin/ansible_command loadr idle
    notify:
      - idle wait
      - continue restart tomcat

  # restart tomcat ( 3. actual restart )
  - name: continue restart tomcat
    command: /usr/bin/nohup /data/local/bin/ansible_command tomcat restart
    notify:
      - wait_for_tomcat

  # restart tomcat ( 4. wait for apps to start )
  - name: wait_for_tomcat
    shell: "c=0;while [ $c -lt 20 ]; do wget -O /dev/null -q  http://localhost/tomcatmanager/text/serverinfo;[ $? -eq 0 ] && exit 0;let c=c+1;sleep 5; done;exit 1"
    register: wait_result
    failed_when: "wait_result.rc != 0"
    notify:
      - restart loadr

  # restart tomcat ( 5. restart loadr )
  - name: restart loadr
    command: /usr/bin/nohup /data/local/bin/ansible_command loadr start


